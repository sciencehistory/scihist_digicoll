// This is a kind of crazy CSS for work-show-page layout, using floats and responsive
// media queries. It could possibly be rewritten simpler (using flexbox?), but it's doing
// some complicated things.
//
// * On a "medium" page, we have two main columns, a 'hero' image (and controls) on the left,
// and title/metadata on the right.
//
// * Below the 'hero' are a list of thumbs of member images, which can scroll UNDER the metadata
// column if there are enough of them, to use that whitespace.
//
// * On a page too narrow for two columns, we get one column, with the title section FIRST,
// then the 'hero' section, then the metadata, then the member images. Even though in two-column
// layout title and metadata are both in right column.
//
// * While the two columsn are normally both 50%, on a very WIDE page, we keep the 'hero'
// column to max at our actual size of large thumb image, and let the metadata column
// grow more than 50%.
//
// * Depending on screen size, the member thumb image list, the thumbs can be differnet
// sizes. They are carefully calculated to be flush with the hero column though, either
// two or three smaller thumbs accross. Our derivative sizes are calculated to try to be
// 'natural' at at least one of these sizes.
//
// This code has gotten a bit crazy -- WARNING it's used on several different
// 'show' pages, making it even harder to change now.  But it works, and does a
//  bunch of nice responsive things.

$main-gutter-width: 40px; // 2.5 16px rem, but we built this on px alas
// thumb width large size (525px)
$max-image-column: 525px;
// this is the point the image column is 'naturally' 525px, any bigger it's 'naturally' bigger,
// and we don't want to let it get so.
// 90px seem to be our main layout/bootstrap outer margins, hacky.
$max-image-column-breakpoint: ($max-image_column * 2) + $main_gutter_width + 90px;


.show-page-layout {
  // even when collapsed to no columns, we don't want image bigger than this
  .show-hero {
    max-width: $max-image-column;
  }

  // some margin at small screen single-column to leave space before image.
  // This needs to be erased at larger screen with columns.  Couldn't manage
  // to get this to work with margin collapsing alone.
  .show-title {
    margin-bottom: ($paragraph-spacer * 2);
  }

  // Big enough for grid, not so big that we need to constrain the image column
  // to be smaller than 50%
  @include media-breakpoint-up(md) {
    .show-hero, .show-metadata, .show-title, .show-file-list, .show-video {
      width: 50%;
      display: inline-block;
    }
    .show-hero, .show-file-list, .show-video {
      max-width: $max-image-column + $main-gutter-width;
      float: left;
      padding-right: $main-gutter-width;
    }
    .show-metadata, .show-title {
      clear: right;
      float: right;
    }
    .show-title {
      margin-bottom: unset;
    }
  }

  @media (min-width: $max-image-column-breakpoint) {
    // // some crazy CSS calc arithmatic to keep the main image and the thumbs under it
    // // at $max-image-column, with still column break centered.
    .show-hero, .show-file-list, .show-video {
      max-width: $max-image-column + $main-gutter-width;
    }
    .show-title, .show-metadata {
      width: calc(100% - #{$max-image-column + $main-gutter-width});
    }
  }


  // The smaller member thumbs that layout in a grid, and can wrap
  // under the metadata.
  .show-member-list-item {
    $member-list-gutter: 4px;
    display: inline-block;
    vertical-align: bottom;
    // good small size for small collapsed screens
    width: 160px;
    margin: 4px $member-list-gutter 32px 0;

    .thumb img {
      width: 100%;
      vertical-align: bottom;
    }

    .btn {
      @extend .btn-sm;
      border-radius: 2px;
    }

    &.lazy-member-images-link {
      aspect-ratio: 1;
      background-color: $shi-gray-2;
      color: $body-color; // need to reset for min WCAG contrast
      vertical-align: top; // some crazy CSS, this is best we can do

      padding: 0.5em;

      // try to center content
      display: inline-flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    // Sizing the images to exactly line up with hero at various sizes,
    // 2 or 3 images accross. This math is weird, not sure why we need the +/-
    // 1 or 2 pixels at the end, but it lines up. (browser-added whitespace?)

    // we have a grid, we want 2 images in the space of the hero column
    @include media-breakpoint-up(md) {
      width: calc( ((50% - #{$main-gutter-width} - #{$member-list-gutter}) / 2) - 1.5px);
    }
    // larger screen, let's let the member list items go 3-wide
    @media (min-width: 1000px) {
      width: calc( (50% - #{$main-gutter-width} - #{$member-list-gutter * 2}) / 3 - 2px);
    }
    // hero column is maxed, max our member thumbs to match
    @media (min-width: $max-image-column-breakpoint) {
      width: calc( (#{$max-image-column} - #{$member-list-gutter * 2}) / 3  - 2px);
    }
  }

  &.work-show-file-list {
    // hackily flush whitespace on top
    .rights-and-social {
      padding-top: 0 !important;
      .rights-statement, .social-media {
        padding-top: 0 !important;
        margin-top: 0 !important;
      }
    }

    .work-description {
      max-width: $max-readable-width;
    }

    .oh-portrait {
      width: $standard-thumb-width;
      margin-top: $paragraph-spacer;
    }
    @include media-breakpoint-up(md) {
      .oh-portrait {
        margin-top: 0;
        margin-left: $paragraph-spacer;

        float: right;
      }
    }
  }
}

// We fork the layout for video page, using grid and flex instead of that crazy legacy
// float, so we can more easily re-order the transcript on mobile. A bit hacky
// with margins and media queries, sorry.
.video-show-page-layout {
  display: grid;

  // At very small screen, single column, and re-arrange transcript
  // to be right below video, which requires us elminating one container
  grid-template-columns: 1fr;
  .show-video {
    display: contents;
  }
  grid-template-areas:
    "show-title"
    "video-player"
    "show-video-transcript"
    "rights-and-social"
    "transcript-toggle"
    "show-metadata";
  .video-player { grid-area: video-player; }
  .transcript-toggle { grid-area: transcript-toggle; }
  .rights-and-social { grid-area: rights-and-social; }

  .show-title, .video-player {
    margin-bottom: $paragraph-spacer * 2;
  }

  .show-video-transcript: {
    margin-top: $paragraph-spacer;
  }

  // Big enough for grid
  @include media-breakpoint-up(md) {
    grid-template-columns: 0.9fr 1fr;
    column-gap: $main_gutter_width;
    grid-template-areas:
      "show-video show-video-transcript"
      "show-video show-title"
      "show-video show-metadata";

    .show-video { display: block; }
    .video-player, .transcript-toggle, .rights-and-social { grid-area: unset; }
    .show-title { margin-bottom: unset; }
    .show-video-transcript { margin-top: unset; }
  }

  // Keep vide from getting too too large
  @include media-breakpoint-up(xl) {
    grid-template-columns: ($max-image-column) 1fr;
  }


  .show-video {
    grid-area: show-video;
    video {
      width: 100%;
    }
  }


  .show-title {
    grid-area: show-title;
  }

  .show-metadata {
    grid-area: show-metadata;
  }

  .show-video-transcript {
    grid-area: show-video-transcript;
    border: 2px solid $shi-gray-3;
    // Kind of hacky formula. No longer than screen to allow scrolling.
    // Ideally all on screen on first page load, even with navbar at top (~17 rem),
    // but no shorter than video. Works out decently, including on mobile sizes.
    max-height: max(349px, calc(95vh - 17rem - 3rem));

    display: flex;
    flex-direction: column;
    .show-video-transcript-heading{
      padding: 0.5rem 1rem 0 1rem;
      display: flex;
      justify-content: space-between;
      align-items: baseline;

      background-color: $shi-gray-3;
     }
    .show-video-transcript-content {
      overflow-y: scroll;
       padding: 1rem;
    }
  }
}

// This has no parent selector, this component is now used in several
// places, including OH public downloads and proteted request downloads.
// Extract to own file?
.show-member-file-list-item {
  display: flex;

  & > div {
    padding: $table-cell-padding-y $table-cell-padding-x;
    border-top: $table-border-width solid $table-border-color;
  }

  .image {
    width: 54px; // thumb_mini width
    padding-left: 0;
    padding-right: 0;
    flex-shrink: 0;
  }

  .title {
    flex-grow: 1;
    width: 100%;
    word-break: break-word;
  }

  // keep more compact, to fit three lines next to thumb, looks fine
  line-height: 1.3;
}

.by-request-items-label {
  @extend %special-label;
  margin-right: 0.66em;
  color: $shi-alt-muted-text;
}

