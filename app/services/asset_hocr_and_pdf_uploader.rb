# Attach two files (normally generated by Tesseract) to the asset.
# Called from assets_controller#submit_hocr_and_textonly_pdf
# AssetHocrAndPdfUploader.new(@asset).attach(
#   hocr: params[:hocr],
#   textonly_pdf: params[:textonly_pdf])

class AssetHocrAndPdfUploaderError < StandardError; end

class AssetHocrAndPdfUploader
  attr_reader :asset

  # @param asset [Asset]
  def initialize(asset)
    @asset = asset
  end

  def attach(hocr:, textonly_pdf:)
    unless hocr.respond_to?(:read) && textonly_pdf.respond_to?(:read)
      raise AssetHocrAndPdfUploaderError.new("Please provide a textonly_pdf and an hocr.")
    end

    begin
      hocr_string = hocr.read
      parsed_hocr = Nokogiri::XML(hocr_string) { |config| config.strict }
      unless parsed_hocr.css(".ocr_page").length == 1
        raise AssetHocrAndPdfUploaderError.new("This HOCR file isn't valid.")
      end
    rescue Nokogiri::XML::SyntaxError
      raise AssetHocrAndPdfUploaderError.new("This HOCR file isn't valid.")
    end

    begin
      pdf_tempfile = textonly_pdf.tempfile
      unless PDF::Reader.new(pdf_tempfile).pages.count == 1
        raise AssetHocrAndPdfUploaderError.new("This doesn't look like a one-page PDF.")
      end
    rescue PDF::Reader::MalformedPDFError      
      raise AssetHocrAndPdfUploaderError.new("This PDF isn't valid.")
    end

    Kithe::Model.transaction do
      @asset.file_attacher.add_persisted_derivatives({textonly_pdf: textonly_pdf})
      @asset.update({hocr: hocr_string, suppress_ocr: false, ocr_admin_note: nil})
    end
    pdf_tempfile.close!
    ReindexWorksJob.perform_later([@asset&.parent&.id])
    return true # just used for testing.
  ensure
    pdf_tempfile.close! if pdf_tempfile
  end
end
